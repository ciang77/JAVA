1、说说你对Spring Boot的理解
从本质上来说，Spring Boot就是Spring，它做了那些没有它你自己也会去做的Spring Bean配置。Spring Boot使用“习惯优于配置”的理念让你的项目快速地运行起来，使用Spring Boot很容易创建一个能独立运行、准生产级别、
基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。
简而言之，Spring Boot本身并不提供Spring的核心功能，而是作为Spring的脚手架框架，以达到快速构建项目、预置三方配置、开箱即用的目的。Spring Boot有如下的优点：

可以快速构建项目；
可以对主流开发框架的无配置集成；
项目可独立运行，无需外部依赖Servlet容器；
提供运行时的应用监控；
可以极大地提高开发、部署效率；
可以与云计算天然集成。

2、Spring Boot Starter有什么用？
Spring Boot通过提供众多起步依赖（Starter）降低项目依赖的复杂度。起步依赖本质上是一个Maven项目对象模型（Project Object Model, POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。
很多起步依赖的命名都暗示了它们提供的某种或某类功能。
举例来说，你打算把这个阅读列表应用程序做成一个Web应用程序。与其向项目的构建文件里添加一堆单独的库依赖，还不如声明这是一个Web应用程序来得简单。你只要添加Spring Boot的Web起步依赖就好了。

3、介绍Spring Boot的启动流程
首先，Spring Boot项目创建完成会默认生成一个名为 *Application 的入口类，我们是通过该类的main方法启动Spring Boot项目的。在main方法中，通过SpringApplication的静态方法，
即run方法进行SpringApplication类的实例化操作，然后再针对实例化对象调用另外一个run方法来完成整个项目的初始化和启动。

4、请描述Spring Boot自动装配的过程
使用Spring Boot时，我们只需引入对应的Starters，Spring Boot启动时便会自动加载相关依赖，配置相应的初始化参数，以最快捷、简单的形式对第三方软件进行集成，这便是Spring Boot的自动配置功能。

整个自动装配的过程是：Spring Boot通过@EnableAutoConfiguration注解开启自动配置，
Spring Boot 为了进一步简化，直接通过 @SpringBootApplication 注解一步搞定，该注解包含了 @EnableAutoConfiguration 注解。
main 类启动的时候，Spring Boot 会通过底层的AutoConfigurationImportSelector 类加载自动装配类。
AutoConfigurationImportSelector实现了ImportSelector接口，该接口的作用是收集需要导入的配置类，配合 @Import() 将相应的类导入到 Spring 容器中。
获取注入类的方法是 selectImports()，它实际调用的是getAutoConfigurationEntry()，这个方法是获取自动装配类的关键。


5、说说你对Spring Boot注解的了解

@SpringBootApplication注解：
在Spring Boot入口类中，唯一的一个注解就是@SpringBootApplication。它是Spring Boot项目的核心注解，用于开启自动配置，准确说是通过该注解内组合的@EnableAutoConfiguration开启了自动配置。

@EnableAutoConfiguration注解：
@EnableAutoConfiguration的主要功能是启动Spring应用程序上下文时进行自动配置，它会尝试猜测并配置项目可能需要的Bean。自动配置通常是基于项目classpath中引入的类和已定义的Bean来实现的。
在此过程中，被自动配置的组件来自项目自身和项目依赖的jar包中。

@Import注解：
@EnableAutoConfiguration的关键功能是通过@Import注解导入的ImportSelector来完成的。从源代码得知@Import(AutoConfigurationImportSelector.class)是@EnableAutoConfiguration注解的组成部分，
也是自动配置功能的核心实现者。

@Conditional注解：
@Conditional注解是由Spring 4.0版本引入的新特性，可根据是否满足指定的条件来决定是否进行Bean的实例化及装配，比如，设定当类路径下包含某个jar包的时候才会对注解的类进行实例化操作。
总之，就是根据一些特定条件来控制Bean实例化的行为。

@Conditional衍生注解：
在Spring Boot的autoconfigure项目中提供了各类基于@Conditional注解的衍生注解，它们适用不同的场景并提供了不同的功能。通过阅读这些注解的源码，你会发现它们其实都组合了@Conditional注解，
不同之处是它们在注解中指定的条件（Condition）不同。

@ConditionalOnBean：在容器中有指定Bean的条件下。
@ConditionalOnClass：在classpath类路径下有指定类的条件下。
@ConditionalOnCloudPlatform：当指定的云平台处于active状态时。
@ConditionalOnExpression：基于SpEL表达式的条件判断。
@ConditionalOnJava：基于JVM版本作为判断条件。
@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。
@ConditionalOnMissingBean：当容器里没有指定Bean的条件时。
@ConditionalOnMissingClass：当类路径下没有指定类的条件时。
@ConditionalOnNotWebApplication：在项目不是一个Web项目的条件下。
@ConditionalOnProperty：在指定的属性有指定值的条件下。
@ConditionalOnResource：类路径是否有指定的值。
@ConditionalOnSingleCandidate：当指定的Bean在容器中只有一个或者有多个但是指定了首选的Bean时。
@ConditionalOnWebApplication：在项目是一个Web项目的条件下。

6、Spring Boot Starter 的原理了解吗？
Spring Boot Starter 主要通过起步依赖和自动配置机制来简化项目的构建和配置过程。
起步依赖是 Spring Boot 提供的一组预定义依赖项，它们将一组相关的库和模块打包在一起。比如 spring-boot-starter-web 就包含了 Spring MVC、Tomcat 和 Jackson 等依赖。
自动配置机制是 Spring Boot 的核心特性，通过自动扫描类路径下的类、资源文件和配置文件，自动创建和配置应用程序所需的 Bean 和组件。


7、Spring Boot 启动原理了解吗？
Spring Boot 的启动由 SpringApplication 类负责：

第一步，创建 SpringApplication 实例，负责应用的启动和初始化；
第二步，从 application.yml 中加载配置文件和环境变量；
第三步，创建上下文环境 ApplicationContext，并加载 Bean，完成依赖注入；
第四步，启动内嵌的 Web 容器。
第五步，发布启动完成事件 ApplicationReadyEvent，并调用 ApplicationRunner 的 run 方法完成启动后的逻辑。

了解@SpringBootApplication 注解吗？
@SpringBootApplication是 Spring Boot 的核心注解，经常用于主类上，作为项目启动入口的标识。它是一个组合注解：

@SpringBootConfiguration：继承自 @Configuration，标注该类是一个配置类，相当于一个 Spring 配置文件。
@EnableAutoConfiguration：告诉 Spring Boot 根据 pom.xml 中添加的依赖自动配置项目。例如，如果 spring-boot-starter-web 依赖被添加到项目中，Spring Boot 会自动配置 Tomcat 和 Spring MVC。
@ComponentScan：扫描当前包及其子包下被@Component、@Service、@Controller、@Repository 注解标记的类，并注册为 Spring Bean。

为什么 Spring Boot 在启动的时候能够找到 main 方法上的@SpringBootApplication 注解？
Spring Boot 在启动时能够找到主类上的@SpringBootApplication注解，是因为它利用了 Java 的反射机制和类加载机制，结合 Spring 框架内部的一系列处理流程。
当运行一个 Spring Boot 程序时，通常会调用主类中的main方法，这个方法会执行SpringApplication.run()
SpringApplication.run(Class<?> primarySource, String... args)方法接收两个参数：第一个是主应用类（即包含main方法的类），
第二个是命令行参数。primarySource参数提供了一个起点，Spring Boot 通过它来加载应用上下文。
Spring Boot 利用 Java 反射机制来读取传递给run方法的类（MyApplication.class）。它会检查这个类上的注解，包括@SpringBootApplication。

Spring Boot 默认的包扫描路径是什么？
Spring Boot 的默认包扫描路径是以启动类 @SpringBootApplication 注解所在的包为根目录的，即默认情况下，Spring Boot 会扫描启动类所在包及其子包下的所有组件。

8、SpringBoot 和 SpringMVC 的区别？
Spring MVC 是基于 Spring 框架的一个模块，提供了一种 Model-View-Controller（模型-视图-控制器）的开发模式。
Spring Boot 旨在简化 Spring 应用的配置和部署过程，提供了大量的自动配置选项，以及运行时环境的内嵌 Web 服务器，这样就可以更快速地开发一个 SpringMVC 的 Web 项目。

9、Spring Boot 和 Spring 有什么区别？（补充）
Spring Boot 是 Spring Framework 的一个扩展，提供了一套快速配置和开发的机制，可以帮助我们快速搭建 Spring 项目的骨架，提高生产效率。




